<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        2f84OeX/ODnl/zg55f84OeX/ODnl/zg55f84OeX/ODnl/zg55f84OeX/MzTf/xEUsecAAAAWAAAAAAAA
        AAAAAAAAAAAAAAAAABYUF7r/Pz3j/zMw4f8zMOH/MzDh/zMw4f8zMOH/MzDh/zMw4f8zMOH/MzDh/zMw
        4f8zMOH/MzDh/zMw4f8zMOH/MzDh/zMw4f8zMOH/MzDh/zMw4f8zMOH/MzDh/zMw4f8/PeP/FBe6/wAA
        ABYAAAAAAAAAAAAAAAAAAAAAAAAAFBQWuv9ZVeX/LSfe/y0n3v8tJ97/LSfe/y0n3v8tJ97/LSfe/y0n
        3v8tJ97/LSfe/y0n3v8tJ97/LSfe/y0n3v8tJ97/LSfe/y0n3v8tJ97/LSfe/y0n3v8tJ97/LSfe/1lV
        5f8UFrr/AAAAFAAAAAAAAAAAAAAAAAAAAAAAAAANEhW18mlk5P81Ld3/Jx7b/yce2/8nHtv/Jx7b/yce
        2/8nHtv/Jx7b/yce2/8nHtv/Jx7b/yce2/8nHtv/Jx7b/yce2/8nHtv/Jx7b/yce2/8nHtv/Jx7b/yce
        2/81Ld3/aWTk/xIVtfIAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAURFKyqR0nR/3By6f8zNuD/Mzbg/zM2
        4P8zNuD/Mzbg/zM24P8zNuD/Mzbg/zM24P8zNuD/Mzbg/zM24P8zNuD/Mzbg/zM24P8zNuD/Mzbg/zM2
        4P8zNuD/Mzbg/3By6f9HSdH/ERSsqgAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAQ4QiyoaHbv/fojp/3OB
        7f9GWOf/Rljn/0ZY5/9GWOf/Rljn/0ZY5/9GWOf/Rljn/0ZY5/9GWOf/Rljn/0ZY5/9GWOf/Rljn/0ZY
        5/9GWOf/Rljn/0ZY5/9zge3/fojp/xodu/8OEIsqAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhET
        qHoqL8L/jZft/2h26/9MXuj/TF7o/0xe6P9MXuj/TF7o/0xe6P9MXuj/TF7o/0xe6P9MXuj/TF7o/0xe
        6P9MXuj/TF7o/0xe6P9MXuj/aHbr/42X7f8qL8L/EROoegAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAxEUrqcsMML/lJ3u/2997P9TZOn/U2Tp/1Nk6f9TZOn/U2Tp/1Nk6f9TZOn/U2Tp/1Nk
        6f9TZOn/U2Tp/1Nk6f9TZOn/U2Tp/3OB7f+Une7/LDDC/xEUrqcAAAADAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAxEUr6YtMcL/mqLv/4iT7/9aaur/Wmrq/1pq6v9aaur/Wmrq/1pq
        6v9aaur/Wmrq/1pq6v9aaur/Wmrq/15u6v+Ik+//mqLv/y0xwv8RFK+mAAAAAwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxEUrocbH7v/g4vk/5ym8v9peev/YHHq/2Bx
        6v9gcer/YHHq/2Bx6v9gcer/YHHq/2Bx6v9peev/nKby/4OL5P8bH7v/ERSuhwAAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARATpUcSFbbxdHrd/6uz
        8/90g+3/Z3fr/2d36/9nd+v/Z3fr/2d36/9nd+v/dIPt/6uz8/90et3/EhW28RATpUcAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAT
        ozYSFbPUeH7e/7G59P97ie3/bn3s/2597P9ufez/bn3s/3uJ7f+xufT/eH7e/xIVs9QQE6M2AAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAwPfxcSFbPUe4He/7e/9f95h+3/dIPt/3SD7f95h+3/t7/1/3uB3v8SFbPUDA9/FwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ4RkigSFbbxipDi/6+49P97ie3/e4nt/6+49P+KkOL/EhW28Q4R
        kigAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ8RlTsdILv/u8Hz/5um8f+bpvH/u8Hz/x0g
        u/8PEZU7AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxETqYtARMf/w8n3/8PJ
        9/9ARMf/EROpiwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBIV
        s+SUmeT/lJnk/xIVs+QAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABDxGWTiotv/8qLb//DxGWTgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAIERSxxREUscUAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIRFLBkERSwZAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwAAD/8AAA//AAAP/8AAP//4Af///AP//gA
        AB/wAAAP4AAAB8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA+AAAAfwAAAP+AAAH/wA
        AD/+AAB//wAA///AA///wAP//+AH///wD///+B////gf///8P////D//KAAAABAAAAAgAAAAAQAgAAAA
        AABABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAAAAMgAAADMAAAAzAAAAMwAA
        ADMAAAAzAAAAMgAAACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhW3xRIVt/kSFbf/EBO2/xAS
        tf8QE7b/EhW3/xIVt/oSFbewAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhS3VRUZ
        u/9YY/D/FRm7/xIUt1UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAzAAAAMwAA
        ADMPEq1iEBK1/w8SsHcAAAAzAAAAMwAAADMAAAAaAAAAAAAAAAAAAAAAAAAAAAAAACINEJidDhGz/w0Q
        sv8PErT/CApcUxEUtv8IClxTDxK0/w0Qsv8OEbP/DRCYnQAAACIAAAAAAAAAAAAAAAAPEaS9ICPG/0NK
        6v9MVPP/O0Li/xEUtPYPErP/ERS09jtC4v9MVPP/Q0rq/yAjxv8PEaW9AAAAAAAAAAAAAAAAEBO3/0ZI
        6f86O+j/Ojvn/zw96P80Nd//ERW1/zQ13/88Pej/Ojvn/zk76P9KS+3/DRCz/wAAAAAAAAAAAAAAAA4S
        t/9wbO7/KCLf/ysk3v8sJt//Lijg/y8p4f8uKOD/LCbf/yok3v8oId//cGzu/wwPs/8AAAAAAAAAAAAA
        AAANELPTTk3U/2Bb5/8oI9v/JR/b/yYh3P8nIdz/JiHc/yUf2/8oI9v/ZWHo/05M1P8NELPTAAAAAAAA
        AAAAAAAADxK1IBMWt/+Fj+r/kZ70/1Nl6/9EV+f/Rljn/0RX5/9TZev/kZ70/4iT6/8TFrf/DxK1IAAA
        AAAAAAAAAAAAAAAAAAAOEbUdBgmx/2lu2v+yvPj/ZnXs/1Rl6v9mdez/srz4/2hu2v8GCLH/DhG1HQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4RtQoHCbLhS1DM/7nC+f9wge//ucL5/0tQzP8HCbLhDhG1CgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUHsuF9gd3/0tv+/32B3f8FB7LhAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAey/52i6P8EB7L/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4RtVsMDrX/DhG1WwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAERS35wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwBwAA8AcAAPwfAADgAwAAwAEAAMABAADAAQAAwAEAAMAB
        AADAAQAA4AMAAPAHAAD8HwAA/j8AAP4/AAD/fwAA
</value>
  </data>
</root>